/* automatically generated by rust-bindgen */


#![allow(dead_code, non_snake_case, non_camel_case_types, non_upper_case_globals)]


#[repr(C)]
#[derive(Copy, Clone)]
pub struct OpaqueTemplate {
}
impl Default for OpaqueTemplate {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Debug, Default, Copy)]
pub struct ContainsOpaqueTemplate {
    pub mBlah: [u32; 11usize],
    pub mBaz: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_ContainsOpaqueTemplate() {
    assert_eq!(::std::mem::size_of::<ContainsOpaqueTemplate>() , 48usize ,
               concat ! ( "Size of: " , stringify ! ( ContainsOpaqueTemplate )
               ));
    assert_eq! (::std::mem::align_of::<ContainsOpaqueTemplate>() , 4usize ,
                concat ! (
                "Alignment of " , stringify ! ( ContainsOpaqueTemplate ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const ContainsOpaqueTemplate ) ) . mBlah as *
                const _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( ContainsOpaqueTemplate
                ) , "::" , stringify ! ( mBlah ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const ContainsOpaqueTemplate ) ) . mBaz as *
                const _ as usize } , 44usize , concat ! (
                "Alignment of field: " , stringify ! ( ContainsOpaqueTemplate
                ) , "::" , stringify ! ( mBaz ) ));
}
impl Clone for ContainsOpaqueTemplate {
    fn clone(&self) -> Self { *self }
}
