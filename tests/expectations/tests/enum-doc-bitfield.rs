/* automatically generated by rust-bindgen */

#![allow(dead_code, non_snake_case, non_camel_case_types, non_upper_case_globals)]

/// Document field with three slashes
pub const B_VAR_A: B = B(0);
/// Document field with preceeding star
pub const B_VAR_B: B = B(1);
/// Document field with preceeding exclamation
pub const B_VAR_C: B = B(2);
/// < Document field with following star
pub const B_VAR_D: B = B(3);
/// < Document field with following exclamation
pub const B_VAR_E: B = B(4);
/// Document field with preceeding star, with a loong long multiline
/// comment.
///
/// Very interesting documentation, definitely.
pub const B_VAR_F: B = B(5);
impl ::std::ops::BitOr<B> for B {
    type Output = Self;
    #[inline]
    fn bitor(self, other: Self) -> Self {
        B(self.0 | other.0)
    }
}
impl ::std::ops::BitOrAssign for B {
    #[inline]
    fn bitor_assign(&mut self, rhs: B) {
        self.0 |= rhs.0;
    }
}
impl ::std::ops::BitAnd<B> for B {
    type Output = Self;
    #[inline]
    fn bitand(self, other: Self) -> Self {
        B(self.0 & other.0)
    }
}
impl ::std::ops::BitAndAssign for B {
    #[inline]
    fn bitand_assign(&mut self, rhs: B) {
        self.0 &= rhs.0;
    }
}
#[repr(C)]
/// Document enum
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub struct B(pub u32);
