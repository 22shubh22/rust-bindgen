/* automatically generated by rust-bindgen */


#![allow(dead_code, non_snake_case, non_camel_case_types, non_upper_case_globals)]


#[repr(C)]
#[derive(Debug, Default, Copy)]
pub struct NoPartialEq {
    pub _address: u8,
}
#[test]
fn bindgen_test_layout_NoPartialEq() {
    assert_eq!(
        ::std::mem::size_of::<NoPartialEq>(),
        1usize,
        concat!("Size of: ", stringify!(NoPartialEq))
    );
    assert_eq!(
        ::std::mem::align_of::<NoPartialEq>(),
        1usize,
        concat!("Alignment of ", stringify!(NoPartialEq))
    );
}
impl Clone for NoPartialEq {
    fn clone(&self) -> Self {
        *self
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy)]
pub struct WhitelistMe {
    pub a: NoPartialEq,
}
#[test]
fn bindgen_test_layout_WhitelistMe() {
    assert_eq!(
        ::std::mem::size_of::<WhitelistMe>(),
        1usize,
        concat!("Size of: ", stringify!(WhitelistMe))
    );
    assert_eq!(
        ::std::mem::align_of::<WhitelistMe>(),
        1usize,
        concat!("Alignment of ", stringify!(WhitelistMe))
    );
    assert_eq!(
        unsafe { &(*(0 as *const WhitelistMe)).a as *const _ as usize },
        0usize,
        concat!(
            "Alignment of field: ",
            stringify!(WhitelistMe),
            "::",
            stringify!(a)
        )
    );
}
impl Clone for WhitelistMe {
    fn clone(&self) -> Self {
        *self
    }
}
