/* automatically generated by rust-bindgen */


#![allow(non_snake_case)]


#[repr(C)]
#[derive(Debug, Copy)]
pub struct JNINativeInterface_ {
    pub GetVersion: ::std::option::Option<unsafe extern "stdcall" fn(env:
                                                                         *mut ::std::os::raw::c_void)
                                              -> ::std::os::raw::c_int>,
}
#[test]
fn bindgen_test_layout_JNINativeInterface_() {
    assert_eq!(::std::mem::size_of::<JNINativeInterface_>() , 4usize , concat
               ! ( "Size of: " , stringify ! ( JNINativeInterface_ ) ));
    assert_eq! (::std::mem::align_of::<JNINativeInterface_>() , 4usize ,
                concat ! (
                "Alignment of " , stringify ! ( JNINativeInterface_ ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const JNINativeInterface_ ) ) . GetVersion as *
                const _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( JNINativeInterface_ ) ,
                "::" , stringify ! ( GetVersion ) ));
}
impl Clone for JNINativeInterface_ {
    fn clone(&self) -> Self { *self }
}
impl Default for JNINativeInterface_ {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
extern "stdcall" {
    #[link_name = "_bar@0"]
    pub fn bar();
}
