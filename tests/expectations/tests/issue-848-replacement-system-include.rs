/* automatically generated by rust-bindgen */

#![allow(
    dead_code,
    non_snake_case,
    non_camel_case_types,
    non_upper_case_globals
)]

#[doc = " This is intended to replace another type, but won\'t if we treat this include"]
#[doc = " as a system include, because clang doesn\'t parse comments there."]
#[doc = ""]
#[doc = " See #848."]
#[doc = ""]
#[doc = " <div rustbindgen replaces=\"nsTArray\"></div>"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct nsTArray<T> {
    pub m: *mut T,
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<T>>,
}
impl<T> Default for nsTArray<T> {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
extern "C" {
    pub fn func() -> *mut nsTArray<::std::os::raw::c_int>;
}
